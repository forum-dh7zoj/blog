[{"id":"21aab6d167e8b8f08f85d33c3f085939","title":"时间复杂度在编程中的应用与实例分析","content":"引言时间复杂度是对算法运行时间的理论分析工具，它揭示了随着输入数据规模n的增长，算法执行所需时间的变化趋势。本文将详细探讨四种常见的时间复杂度类型：常数阶O(1)、线性阶O(n)、对数阶O(log n)以及平方阶O(n^2)，并结合代码实例进行深入解析。\n一、常数阶时间复杂度 O(1)定义：常数阶时间复杂度表示无论输入数据规模如何变化，算法运行所需时间基本保持不变。\n实例分析：\n12def constant_time_operation(data):    return data[0]  # 不论data列表长度为多少，获取第一个元素的操作都是固定时间的\n在这个例子中，不论data列表有多长，获取第一个元素的时间是恒定的，因此该函数的时间复杂度为O(1)。\n二、线性阶时间复杂度 O(n)定义：线性阶时间复杂度表明算法的运行时间与输入数据规模成正比关系，数据规模每增加一个单位，运行时间也会相应地增加一个基本单位。\n实例分析：\n1234def linear_time_operation(data):    for item in data:        # 对data中的每个元素执行某项操作        pass\n上述代码遍历了一个列表或链表的所有元素，对于长度为n的数据结构，需要执行n次操作，所以其时间复杂度为O(n)。\n三、对数阶时间复杂度 O(log n)定义：对数阶时间复杂度意味着当数据规模翻倍时，所需时间仅增长一个单位。这种效率在处理大规模数据时表现优秀。\n实例分析：以二分查找为例\n12345678910111213141516def binary_search(data, target):    low, high = 0, len(data) - 1        while low &lt;= high:        mid = (low + high) // 2        if data[mid] == target:            return mid        elif data[mid] &lt; target:            low = mid + 1        else:            high = mid - 1                return -1  # 如果未找到目标值则返回-1# 在排序后的数组中查找目标值binary_search(sorted_data, target)\n在二分查找中，每次比较都将搜索范围缩小一半，因此在最坏情况下，查找长度为n的已排序数组中的元素所需次数最多为log2(n)，故此函数的时间复杂度为O(log n)。\n四、平方阶时间复杂度 O(n^2)定义：平方阶时间复杂度意味着算法的运行时间与输入数据规模的平方成正比，当数据规模增大时，计算时间会急剧增加。\n实例分析：以冒泡排序为例\n123456789def bubble_sort(data):    n = len(data)        for i in range(n):        for j in range(0, n - i - 1):            if data[j] &gt; data[j + 1]:                data[j], data[j + 1] = data[j + 1], data[j]                    return data\n冒泡排序通过两层循环完成排序，外层循环次数为n，内层循环次数随外层循环递减，但最大仍为n次。因此，在最坏的情况下，总共进行了n * (n-1)&#x2F;2次比较和交换，时间复杂度为O(n^2)。\n总结来说，理解和掌握不同时间复杂度的概念及其对应的典型算法，有助于我们在编程实践中选择最优解法，合理的时间复杂度分析能有效提升程序性能和解题效率。\n","slug":"时间复杂度在编程中的应用与实例分析","date":"2024-02-08T12:30:04.000Z","categories_index":"编程","tags_index":"官方","author_index":"LaoShui"},{"id":"389b18851d712cc1db6a774e37294354","title":"竞赛编程中分析时间复杂度与空间复杂度的重要性","content":"引言在竞赛编程领域，高效且准确的算法是决胜的关键。而衡量一个算法优劣的重要指标，便是其时间和空间复杂度。本文将深入探讨在竞赛编程中如何理解和分析时间复杂度与空间复杂度，以及它们对于优化代码性能、提升解题效率的重要性。\n一、时间复杂度1. 定义时间复杂度是对算法运行时间的量化度量，它描述的是问题规模n增大时，算法执行时间的增长速度。通常用大O符号（Big O notation）表示，例如：O(1)，O(n)，O(log n)，O(n^2)等。\n2. 分析方法\n常数阶时间复杂度 O(1)：无论输入数据规模如何，算法运行的时间基本保持不变。\n线性阶时间复杂度 O(n)：算法运行时间与输入数据规模成正比，如遍历数组或链表。\n对数阶时间复杂度 O(log n)：二分查找、堆排序等算法在处理大量数据时表现出优秀的效率。\n平方阶时间复杂度 O(n^2)：如冒泡排序、选择排序等，当数据规模增大时，计算时间急剧增加。\n\n在竞赛中，我们通常会选择时间复杂度低的算法以保证程序能在规定时间内完成求解。\n二、空间复杂度1. 定义空间复杂度是指算法在运行过程中临时占用存储空间大小的增长趋势，同样使用大O符号表示。\n2. 分析方法\n常数阶空间复杂度 O(1)：算法所需额外空间不随输入数据规模增大而增大，比如大部分数学运算函数。\n线性阶空间复杂度 O(n)：算法所需空间与输入数据规模成正比，如动态规划中的数组存储状态，或者深度优先搜索过程中的递归栈。\n对数阶、指数阶等其他复杂度：根据具体情况，可能需要考虑更复杂的空间消耗模型。\n\n在某些限制内存使用的竞赛题目中，降低空间复杂度尤为重要，避免因内存溢出而导致程序崩溃。\n三、实战应用在实际竞赛编程中，理解并熟练运用时间复杂度和空间复杂度分析，能够帮助我们：\n\n快速识别并排除明显效率较低的解题方案；\n在多种解法中选取最优策略，特别是在大规模数据场景下；\n设计更为精巧的算法，提高代码运行效率；\n预估程序性能，合理安排代码结构，防止超时或内存溢出。\n\n接下来的文章会详细介绍这些算法的优劣和使用方法\n","slug":"竞赛编程中分析时间复杂度与空间复杂度的重要性","date":"2024-02-08T10:41:34.000Z","categories_index":"编程","tags_index":"官方","author_index":"LaoShui"},{"id":"1ce36757e3e88b272b7c9f6027d9ece0","title":"基于函数计算3.0 Stable Diffusion Serverless API 的AI艺术字头像生成应用搭建与实践的报告","content":"随着AIGC技术的热度持续升高，AI绘画以其独特创新的艺术表现力吸引了广泛的关注，我通过利用阿里云函数计算团队开发的基于Stable Diffusion Serverless API解决方案，搭建了一套能够满足多场景需求的高性能、易部署和可扩展的AI艺术字头像生成平台。\n利用Stable Diffusion Serverless API强大的并发能力，多个请求可以并行处理，显著提高出图效率。用户还可以通过高级设置调整文字内容、字体、颜色、位置大小等细节参数，以及Stable Diffusion模型本身的渲染选项如迭代步数、提示词、反向提示词等，快速生成具有艺术特色的AI文字头像，尤其适合在春节期间进行分享展示。\n实验过程中 使用了如下阿里云服务：\n函数计算 FC（Function Compute）对象存储 OSS表格存储 Tablestore\n实验后，真实感受到了阿里云函数计算FC 3.0的全托管、事件驱动特性使整个应用轻量灵活，易于集成和扩展。未来，随着AIGC技术不断进步，此类Serverless解决方案将为更多开发者提供便捷的工具链和服务环境，进一步推动AI绘画技术在各行业中的创新应用和商业化落地。\n\n\n\n\n\n","slug":"基于函数计算3-0-Stable-Diffusion-Serverless-API-的AI艺术字头像生成应用搭建与实践的报告","date":"2024-02-08T10:10:35.000Z","categories_index":"编程,fc AIGC,Serverless,人工智能,函数计算","tags_index":"官方","author_index":"LaoShui"},{"id":"7de560be96c07e91106fbeea15a80e20","title":"2023学年第二学期校园广播站歌单","content":"\n\n\n该文章不定期更新\n查看 下载歌曲进入 LaoShui的存储站\n","slug":"2023_02_Campus-Radio-Station-Singles","date":"2024-02-03T05:30:00.000Z","categories_index":"歌单","tags_index":"官方","author_index":"LaoShui"},{"id":"d474c339b16bd4b2fa6459002b26491b","title":"Python OJ题典型算法：字符型数据与ASCII码详解","content":"介绍本文将介绍字符型数据与ASCII码的相关知识点。\n解析在计算机中，字符型数据与ASCII码密切相关。ASCII（American Standard Code for Information Interchange）是一种用于表示文本字符的编码方式。\n解题思路要理解字符型数据与ASCII码之间的关系，我们首先需要了解ASCII码的基本概念和原理。\nASCII码使用7位二进制数（即128个不同的值）来表示所有的可打印字符、控制字符以及一些特殊字符。每个字符都有一个对应的唯一的ASCII码。\n在字符串中，每个字符都可以用一个ASCII码来表示。例如，字符’A’对应的ASCII码是65，字符’a’对应的ASCII码是97。\n代码实现下面是一个示例代码，演示了如何将字符转换为对应的ASCII码：\n12345678# 输入一个字符char = input(&quot;请输入一个字符：&quot;)# 使用ord()函数获取字符的ASCII码ascii_code = ord(char)# 输出ASCII码print(&quot;字符&quot;, char, &quot;的ASCII码是：&quot;, ascii_code)\n\n测试示例假设输入的字符是：’A’\n输出：\n1字符 A 的ASCII码是： 65\n\n解题技巧\n要记住ASCII码中常见字符的对应关系，可以通过查看ASCII码表或使用编程语言提供的内置函数来获取。\n可以使用ord()函数将字符转换为对应的ASCII码，使用chr()函数将ASCII码转换为对应的字符。\n在处理字符串时，需要注意字符编码的问题，尤其是当涉及到不同编码方式（如Unicode）时。\n\n总结本文介绍了字符型数据与ASCII码的关系，以及如何将字符转换为对应的ASCII码。通过理解和掌握这些知识点，我们可以在编程中更方便地处理字符型数据，并进行相关的操作。\n","slug":"Python-OJ题典型算法：字符型数据与ASCII码详解","date":"2024-01-20T14:47:10.000Z","categories_index":"编程,Python","tags_index":"官方","author_index":"LaoShui"},{"id":"c7d0ccfa3f344c02b0cc5d43076d420e","title":"Python OJ题：快速求出现次数最多的数字","content":"例题问题描述景区在售票时，从游客身份证中提取了年龄信息。现在，景区管理员想知道，按年龄统计，游客数量最多的是什么年龄？\n输入只有一行，n 个游客年龄数据，数据为整数，两个数据之间有一个空格\n输出第一行：输出最多游客数量的年龄，相同数量的，优先输出年龄大的\n第二行：输出最多游客的数量\n样例135 40 80 40 40 40 35 40 15 20\n\n12405\n\n\n分析要解决这道题，我们只需要创建一个列表，记录游客的年龄信息，然后找到列表中元素出现的频次，并找出出现次数最多的元素及其对应的出现次数\n那么我们可以通过Python collections 模块中的 Counter 类来快速找到列表中出现最多的数字\nCounter 是一个字典子类，用于计数可哈希对象（如本题中列表中的元素）的数量\n实现我们首先创建一个 Counter 对象 c，通过传入列表 lst 进行初始化。在这个过程中，Counter 对 lst 中的所有元素进行计数，结果是一个字典，其中键是列表中的元素，值是它们在列表中出现的次数\n1c = Counter(lst)\n\n然后使用 Counter 的 most_common() 方法获取出现次数最多的元素。most_common() 方法返回一个列表，其中包含元组，每个元组包含一个元素及其出现次数，按出现次数从高到低排序\n12c.most_common(1)[0][0]c.most_common(1)[0][1]\n\n\nc.most_common(1) 表示我们只需要出现次数最多的那一个元素及其出现次数，因此传入参数 1\n\n[0][0] 和 [0][1] 分别用于获取这个元组的第一个和第二个元素，也就是出现次数最多的元素及其对应的出现次数\n\n\n再将出现次数最多的元素赋值给变量 a，出现次数赋值给变量 b\n12a = c.most_common(1)[0][0]b = c.most_common(1)[0][1]\n\n最后，分别打印出出现次数最多的元素 a 和其对应的出现次数 b\n12print(a)print(b)\n\n但要注意的是，本题中要求相同数量的，优先输出年龄大的。而使用这种方法会优先输出年龄小的，所以我们需要做一些改变\n代码示例1234567891011121314from collections import Counterlst = list(map(int, input().split()))c = Counter(lst)max_count = max(c.values())max_ages = [age for age, count in c.items() if count == max_count]max_ages.sort(reverse=True)a = max_ages[0]b = max_countprint(a)print(b)","slug":"Python-OJ题：快速求出现次数最多的数字","date":"2024-01-11T14:45:34.000Z","categories_index":"编程,Python","tags_index":"官方","author_index":"LaoShui"},{"id":"82d6b7f5c3375677fef0dcc8c116f009","title":"2023学年第一学期校园广播站歌单","content":"截止2023&#x2F;01&#x2F;25 2023学年第一学期广播站歌单内收录的所有歌曲已全部安排播放 本学期自2023&#x2F;09&#x2F;08开始播放歌曲共收录播放歌曲462首\n\n查看 下载歌曲进入 LaoShui的存储站\n以下为备选歌曲：周深 - 有我 - 庆祝中国共青团成立100周年主题宣传片《共青春》主题曲 √\n张杰 - 最美的太阳 - 每日推荐 √\nProfessor Green - In The Shadow Of The Sun √\n唐汉霄 - 茶啊少年 - 电影《茶啊二中》态度曲 - 每日推荐 √\n王梓钰,音阙诗听 - 青春不打烊（JOKER 2018Mix） - 沈芷羽 √\n周杰伦 - 兰亭序 - 夏紫怡 √\n岑宁儿 - 追光者 - 电视剧《夏至未至》插曲 - 每日推荐 √\nWiz Khalifa,Charlie Puth - See You Again - 有缘再见电影《速度与激情7》片尾曲；第58届格莱美提名歌曲 - 每日推荐 √\nJonas Blue,RAYE - By Your Side - 杨译博 √\nShakira - Try Everything - 电影《疯狂动物城》主题曲 - 每日推荐 √\nShe Her Her Hers - Episode 33 - 王迁涵 √\n李润祺 - 茫 - 俞子轩 √\n南征北战NZBZ - 我的天空 - 每日推荐 √\n澤野弘之、SennaRin - IVORY TOWER (feat. SennaRin) - 王迁涵 √\nGAI周延 - 华夏 - 每日推荐 √\nBroiler,Imagine Dragons - Shots (Broiler Remix) - 俞冠羽 √\n指弹 《江南》 - 林俊杰 - 每日推荐 √\n南征北战NZBZ - 骄傲的少年 - 动画《那年那兔那些事儿》第二季片尾曲 - 每日推荐 √\n国风堂,司南 - 吹灭小山河 - 每日推荐 √\nPianoboy高至豪 - The truth that you leave - 每日推荐\n房东的猫 - 斑马斑马 - 徐若岚 √\n就是南方凯（项学凯） - 巡光 - 每日推荐 √\n池鱼 - 谁家 - 每日推荐 √\n周深 - 触不可及 - 每日推荐 √\n周深 - 征途 - 每日推荐 √\n张韶涵,刘惜君 - 如愿 (Live) - 每日推荐 √\n刘明湘 - 漂洋过海来看你 - 余宣萱 √\nTaylor Swift - Cruel Summer - 郭哲辰 √\n凤凰传奇 - 山河图 - 邬佳裕 √\nKelly Clarkson - Catch My Breath - 邵诗娴 √\n五月天 - 倔强 - 陈俊熙 √\n石凯 - 竹蜻蜓 - 孙书言 √\nBeyond - 海阔天空 - 赖致远 √\n灰澈 - 星茶会 - 杨译博 √\nMr. Polska - Move Up (Lost Gravity) - 徐泽阳 √\nHOYO-MiX,Anthony Lynch - 踏上旅途 Take the Journey - 每日推荐 √\nTaylor Swift - Anti-Hero - 郭哲辰 √\nLauv - Lonely Eyes - 余默浔 √\nBebe Rexha - Ferrari - 余默浔 √\n鹿先森乐队 - 春风十里 - 余默浔 √\n郭麒麟 - 无名的人 - 电影《雄狮少年》主题曲 - 余默浔 √\n赵雷 - 我记得 - 余默浔 √\n汪峰 - 光明 - 余默浔 √\nLazer Boomerang - Time to Pretend - 余默浔 √\n黄子弘凡 - 青火 - 孙书言 √\n黄子弘凡 - 笑饮孤鸿 - 孙书言 √\n黄子弘凡 - 成为你想成为的大人 - 孙书言 √\n吴子健REmi - 难书 - 每日推荐 √\n陈亦洺、朝歌夜弦 - 江湖之间 - 每日推荐 √\n南征北战NZBZ - 最美的期待 - 每日推荐 √\n许巍 - 蓝莲花 - 每日推荐 √\n李晨、杨颖、郑恺、朱亚文、王彦霖、Lucas、宋雨琦 - 造亿万吨光芒 - 沈晔 √\n街道办GDC、欧阳耀莹 - 春娇与志明 - 沈晔 √\n葛东琪 - 风吹丹顶鹤 - 邬佳裕 √\nKatie Sky - Monsters - 杨译博 √\nDavid Guetta,Sia - Titanium - 每日推荐 √\nThe Script,will.i.am - Hall of Fame - 每日推荐 √\nLaoShui - 未来我来_A♭_major__bpm_100 44100 1_01 - 2023年中央广播电视总台春节联欢晚会歌曲自制伴奏 - 每日推荐 √\n周深 - 光亮 - 叶灵韵 √\nm-taku - Komorebi - 严皓凯 √\nTFBOYS - 不完美小孩 - 洪睿晗 √\nDa-iCE - Two As One - 剧场版《欧布奥特曼 羁绊之力借我一用!》主题曲 - 俞冠羽 √\nSnigellin - When I see the light at that Time - 余芊萱 √\n承桓 - 我会等 - 余芊萱 √\n周杰伦 - 爱在西元前 - 余芊萱 √\nAnson Seabra - Peter Pan Was Right - 余芊萱 √\nHillsong Young &amp; Free - Wake (Studio) - 每日推荐 √\n周杰伦 - 晴天 - 姚芊羽 √\nImagine Dragons - Bones - 邬瑞凝 √\nImagine Dragons - Natural - 邬瑞凝 √\nImagine Dragons - Demons - 邬瑞凝 √\n李常超 (Lao乾妈) - 盗墓笔记·十年人间 - 余芊萱 √\n程潇 - 若情 - 王馨颖 √\n凤凰传奇 - 最炫民族风 - 每日推荐 √\n阿禹ayy - 耍把戏 - 每日推荐 √\n周深 - 时结 - 陈欣瑜 √\n周深 - 璀璨冒险人 - 陈欣瑜 √\n周杰伦 - 七里香 - 王子奥 √\nVicetone,Cozi Zuehlsdorff - Nevada - 赖致远 √\nZedd,Jon Bellion - Beautiful Now - 黄宇翔 √\n梦然 - 是你 - 每日推荐 √\n王力宏,谭维维 - 缘分一道桥 - 电影《长城》片尾曲 - 每日推荐 √\n大张伟 - 世上最美好的祈祷 - 电影《你好，李焕英》片尾曲 - 每日推荐 √\n汪苏泷 - 闪耀 - 柴思婷 √\n鹿晗 - 勋章 - 电影《我是证人》主题曲 - 柴思婷 √\n阿禹ayy - 少年你也怀疑自己不是主角了吗 - 柴思婷 √\n南征北战NZBZ - 闪耀 - 每日推荐 √\n凤凰传奇 - 奢香夫人 - 每日推荐 √\nMANTA - 断臂的维纳斯 - 张琪乔 √\nToby Fox - His Theme ▸ Sprightly (DJ20001S1版) - 陈志豪 √\nYOASOBI,Midories - The Swallow (feat. Midories) - 毛睿一 √\nTaylor Swift - You Need To Calm Down - 胡仟渝 √\n周深 - Rubia - 陈依萌 √\n时代少年团 - 躺着真舒服 - 王子奥 √\n张韶涵,王嘉尔,Sunnee杨芸晴 - 有你有我 - 杭州亚运会官方主题推广曲 - 每日推荐 √\n周深 - 爱达未来 - 杭州亚运会官方主题推广曲 - 每日推荐 √\n孙楠 - 同爱同在 - 杭州亚运会主题曲 - 每日推荐 √\n许巍 - 第三极 - 每日推荐 √\n时代少年团 - 无尽的冒险 - 陈思璇 √\n韦唯,周深,萧敬腾 - 从现在 到未来 - 杭州亚运会官方主题推广曲 - 每日推荐 √\n南征北战NZBZ - 祖国 - 共青团中央宣传部联合出品 - 每日推荐 √\n阿冗 - 你的答案 - 每日推荐 √\n周深 - 我，江湖！ - 每日推荐 √\n共青团中央,青年湖南,Windapaper_RADI8 - 星火 - 每日推荐 √\n呼斯乐 - 青春火焰 - 每日推荐 √\nTFBOYS - 大梦想家 - 陈梦琪 √\n周杰伦 - 红尘客栈 - 虞可欣 √\n周深 - 美美 - 中国动画百年纪念曲 - 每日推荐 √\n中国交响乐团,中国交响乐团合唱团 - 我的梦 (聚力新生版) - 每日推荐 √\n周深 - 如许 - 每日推荐 √\n南征北战NZBZ - 领风者 - 每日推荐 √\nDelacey - Dream It Possible - 每日推荐 √\nANU - 飞 - 电视剧《少年派2》片头曲 - 每日推荐 √\n刘畊宏、吴克群、明道、郑建鹏、张欣尧、梁汉文、房东的猫、隔壁老樊、魏巡、斯外戈、王小玮、孟西、李昃佑、李茂、多余和毛毛姐、刘大拿、旺姆、李琦、段林希、阿吉太组合、王乃迎、张阳阳、蓝光乐队丹丹、刘大壮、江南舅舅、豪哥哥、言真、刘思瑶、你的欲梦、云福晋、管晨辰、阿里郎演唱组 - 无忧无虑的奔跑 - 2023杭州亚运会助力歌曲 - 余默浔 √\n李玉刚 - 万疆 - 每日推荐 √\n范玮琪 - 最初的梦想 - 陈禹帆 √\n周深 - 你要跳舞吗 - 每日推荐 √\n周深 - 雪花落下 - 每日推荐 √\n黄征、羽·泉 - 奔跑 - 每日推荐 √\n周深 - 若梦【录音棚版本】 - 每日推荐 √\n周深 - 浮游【录音棚版本】 - 每日推荐 √\n张也、周深 - 灯火里的中国 - 陈欣瑜 √\n李鑫一 - 无人之境 - 每日推荐 √\n七叔-叶泽浩 - 踏山河 - 余芊萱 √\n周深 - 望 - 每日推荐 √\n周深 - 我的答案 - 人民检察概念曲 - 每日推荐 √\n白挺 - 你从未离去 - 电影《熊出没之雪岭熊风》片尾主题曲 - 每日推荐 √\n周深 - 大鱼 - 陈欣瑜 √\n周杰伦 - 青花瓷 - 夏紫怡 √\n张韶涵 - 淋雨一直走 - 每日推荐 √\n张韶涵、王赫野 - 篇章 - 每日推荐 √\n南征北战NZBZ - 不愿回头 - 每日推荐 √\n李巍V仔 - 守护着我的光 - 每日推荐 √\n尚雯婕 - 鹿 be free - 电影《熊出没·奇幻空间》主题曲 - 每日推荐 √\n白挺 - 一路走好 - 《熊出没之夺宝熊兵》主题曲 - 每日推荐 √\n洪辰 - 勇往直前 伴奏 - 《熊出没之探险日记》主题曲 - 每日推荐 √\n陈雪燃 - 无名之辈 - 每日推荐 √\nEm Beihold - Numb Little Bug - 邬瑞凝 √\n浩然H.R - 年少的你啊 - 每日推荐 √\n洪辰、宁桓宇 - 我乘着风飞过来 - 电影《熊出没之熊心归来》插曲 - 每日推荐 √\n就是南方凯 - 你就是远方 - 每日推荐 √\n尚雯婕 - free &amp; unafraid 自由与勇敢 - 电影《熊出没·奇幻空间》主题曲英文版 - 每日推荐 √\n逃跑计划 - 一万次悲伤 - 每日推荐 √\n周深 - 兰亭序 (Live) - 每日推荐 √\n周深 - 向光而行 - 每日推荐 √\n周深 - 听我说 - 余默浔 √\nThe Chainsmokers、Coldplay - Something Just Like This - 邬瑞凝 √\n雷佳 - 写故事的人 - 《我们这十年》电视剧片尾主题曲 - 余默浔 √\n周杰伦 - 半岛铁盒- 姚芊羽 - (孙士蘅) √\n南征北战NZBZ - 生来倔强 - 每日推荐 √\n王晓天 - 荣耀 - 每日推荐 √\n奇然,沈谧仁 - 琵琶行 - 黄炯凯 √\n凤凰传奇 - 月亮之上 - 每日推荐 √\n周深 - 亲爱的旅人啊 - 秦勤 √\n毛不易 - 无名的人 - 秦勤 √\n周杰伦 - 听妈妈的话 - 陈志豪 √\n崔伟立 - 酒醉的蝴蝶 - 程榆涵 √\n林俊杰 - 新地球 - 缪柯言 √\n井胧、井迪 - 骁 - 每日推荐 √\n王力宏 - 天地龙鳞 - 大型纪录片《紫禁城》主题歌 - 每日推荐 √\n浮生梦tuzi - 星月落 - 每日推荐 √\n张碧晨 - 光的方向 - 每日推荐 √\nDripice - Escape - 每日推荐 √\n凤凰传奇 - 荷塘月色 - 每日推荐 √\nKelly Clarkson - Stronger - 每日推荐 √\n郁可唯 - 知否知否 (女声版) - 傅嘉瑜 √\n刘至佳、韩瞳 - 时光背面的我 - 每日推荐 √\nAshes Remain - On My Own - 每日推荐 √\nTheFatRat、Anjulie - Close To The Sun - 每日推荐 √\nGooGoo - 我的纸飞机 (纯享版) - 余默浔 √\n羽·泉、张继科、那吾克热-NW - 飞越巅峰 - 余默浔 √\n张杰、张靓颖 - 沉香 - 方蓓淇 √\nThe Glitch Mob,Mako,The Word Alive - RISE - 陈姝含 √\n郭静 - 青春不打烊 - 每日推荐 √\n洛少爷 - 追光者 - 张彬钰 √\n千月兔、封茗囧菌、双笙 (陈元汐)、艾辰 - 2021～听风捕梦～ - 张彬钰 √\n太一 - 负重一万斤长大 - 张彬钰 √\nThe Nelons - Auld Lang Syne - 张彬钰 √\nBeyond - 光辉岁月- 每日推荐 √\nAchim Reichel - Aloha Heja He - 每日推荐 √\n张韶涵 - 兽 - 每日推荐 √\nBeyond - 不再犹豫 - 每日推荐 √\n李怡然同学 - 可能 - 陈姿霖 √\n黄勇,任书怀 - 你看到的我 - 每日推荐 √\n我只吃晚饭_李雨霏,刘兆宇 - 深夜到黎明 - 每日推荐 √\n白挺 - 你从未离去 (2022新版) - 每日推荐 √\nNUANHAO,MINGYANG - Lukas Graham-7 Years（NUANHAO ／ MINGYANG remix） - 每日推荐 √\n水禹,风范 - 少年，请去更高的地方（《百万Up学神天天演我》原创同人曲） - 每日推荐 √\n共青团中央,奇然,词者lyrics - 破浪 - 每日推荐 √\n周深 - 睡个好觉 - 好眠夜主题曲 - 每日推荐 √\n郭采洁 - 我的未来式 - 每日推荐 √\nMichael Schulte - Back to the Start - 每日推荐 √\n兰青 - 泛舟人 - 徐若岚 √\n共青团中央,JuggShots_RADI8,Windapaper_RADI8 - 向前飞 - 每日推荐 √\n田震 - 风雨彩虹铿锵玫瑰 - 共青团中央 2022年2月6日推荐 √\n周深 - 请笃信一个梦 - 每日推荐 √\n周深 - This is Me (Live) - 每日推荐 √\n五月天 - OAOA (现在就是永远) - 每日推荐 √\n周深 - 繁星璀璨的天空 - 每日推荐 √\n周深 - 和光同尘 - 每日推荐 √\n华晨宇 - 风之海 - 王若羽 √\n王巨星 - 太阳 - 夏紫怡 √\n朴树 - 平凡之路 - 每日推荐 √\n徐南 - 乘风破浪 - 每日推荐 √\n杨培安 - 我相信 - 电视剧《新兵日记》片尾曲 - 每日推荐 √\n周杰伦 - 千山万水 - 每日推荐 √\n周深 - 人间星河 - 每日推荐 √\n犬儒乐队 - 志铭 - 王迁涵 √\n李荣浩 - 乌梅子酱 - 俞子轩 √\n周深 - 一试有成 - 每日推荐 √\nTaylor Swift - Style - 郭哲辰 √\nZic子晨 - 半山腰 - 严皓凯 √\n张杰 - 跨过山海 - 每日推荐 √\n吕大叶,马子林,陈觅Lynne - 篝火旁 - 每日推荐 √\n周深 - 生活总该迎着光亮 - 每日推荐 √\n抠抠 - 星光就在前方 - 每日推荐 √\n周深 - 似夏 - 陈欣瑜 √\n网易云音乐校园,银临,国风堂 - 山居秋暝 - 每日推荐 √\n冽冽 - 白日梦 - 徐若岚 √\n张杰 - 逆态度 - 每日推荐 √\nTaylor Swift - All Too Well - 孙书言 √\nMaroon 5,Wiz Khalifa - Payphone - 余芊萱 √\n就是南方凯（项学凯） - 奋跃而上 - 严皓凯 √\n焦迈奇 - 你曾是少年 - 余默浔 √\n周深 - 旅途 - 陈欣瑜 √\nThe Rare Occasions - Notion - 刘佳盈 √\n袁咏琳 - 追梦的眼泪 - 每日推荐 √\n周杰伦 - 明明就 - 张皓然 √\nRobin Hustin,TobiMorrow,Jex - Light It Up - 每日推荐 √\nTobu - Life - 每日推荐 √\n南征北战NZBZ - 我们是谁 - 每日推荐 √\nBeyond - 冲开一切 - 每日推荐 √\n李怡然同学 - 我啊你啊风啊 - 余默浔 √\n周深 - 人是_ - 电影《流浪地球2》定义主题曲 - 陈欣瑜 √\nJonathan Steingard,Hawk Nelson - Sold Out - 余芊萱 √\n周杰伦 - 园游会 - 陈志豪 √\n周深 - 借梦 - 陈欣瑜 √\n陈奕迅 - 让我留在你身边 - 每日推荐 √\n胡夏 - 知足 - 每日推荐 √\n周深 - 我以渺小爱你 - 环保公益纪实节目 《一路前行》主题曲 - 每日推荐 √\n池鱼,就是南方凯（项学凯）,万垒 - 荆棘之上 - 严皓凯 √\n杨树人 - 素质人生 - 每日推荐 √\n米津玄師 - Lemon - 王若羽 √\n周深 - 明明 - 每日推荐 √\nBeyond - 谁伴我闯荡 - 电影《Beyond日记之莫欺少年穷》插曲 - 每日推荐 √\n祖海 - 好运来- 每日推荐 √\n万茜,南征北战NZBZ - 我的名字 - 中国记者推广曲 - 每日推荐 √\n鱼闪闪 - 焰火少年 - 每日推荐 √\n宋雨琦 - 造浪 - 《我要逆风去》电视剧主题曲 - 胡仟渝 √\n蓝波 - 迎着风 - 电影《四平青年之浩哥大战古惑仔》主题曲 - 每日推荐 √\nBeyond - 真的爱你 - 每日推荐 √\n司南 - 星星在唱歌 - 每日推荐 √\nCassadee Pope,Nash Overstreet,Brett Boyett - I Am Invincible - 每日推荐 √\n周深 - 云裳羽衣曲 - 陈欣瑜 √\nGabriela Bee - I’ll Be There - 每日推荐 √\nBeyond - 冲上云霄 - 每日推荐 √\nConnie Talbot - Count on Me - 每日推荐 √\n乔杉 - 塑料袋 - 电影《缝纫机乐队》插曲 - 每日推荐 √\nJames Horner - The Ludlows - 电影《燃情岁月》插曲 - 每日推荐 √\n大鹏,黄贯中,叶世荣 - 不再犹豫 (Remix版) - 电影《缝纫机乐队》插曲 - 每日推荐 √\n黄家驹,大鹏 - 再见理想 (Remix版) - 电影《缝纫机乐队》插曲 - 每日推荐 √\nBeyond - 再见理想 - 每日推荐 √\n周深 - 可它爱着这个世界 - 陈欣瑜 √\nJake Miller - Click - 每日推荐 √\n沈以诚 - 乘风而起 - 电视剧《风暴舞》插曲 - 每日推荐 √\n凤凰传奇 - 天蓝蓝 - 每日推荐 √\n凤凰传奇 - 秋画 - 每日推荐 √\n周深 - I’m A Star - 电影《星愿》许愿星之歌 - 每日推荐 √\n周深,GAI周延 - 玫瑰少年 (Live) - 陈欣瑜 √\nJay Bombay,NEIMY - Difficult - 每日推荐 √\nCozi Zuehlsdorff,Vicetone - Way Back - 每日推荐 √\nNene郑乃馨 - All About That Day - 每日推荐 √\n周深 - 卡布叻船长 - 陈欣瑜 √\nGALA - 追梦赤子心 - 每日推荐 √\nMike Perry,SHY Martin - The Ocean (Radio Edit) - 每日推荐 √\nTheFatRat - Rise Up - 每日推荐 √\n无风即风,天府事变 - 你在我心里面 - 动漫《那年那兔那些事儿》主题曲作品征集三等奖 - 每日推荐 √\n周深 - Try Everything (Live) - 每日推荐 √\n陈奕迅 - 十年 - 每日推荐 √\n璨乐团 - 飞-致我们的星辰大海 - 动画《那年那兔那些事儿》第三季片尾曲 - 每日推荐 √\n易烊千玺 - Unpredictable - 洪睿晗 √\n易烊千玺 - Nothing to Lose - 每日推荐 √\n周深 - 听见下雨的声音 (Live版) - 每日推荐 √\n阿鲲 - 训练生活 - 每日推荐 √\n孟美岐 - 有种 - 电影《流浪地球》推广曲 - 每日推荐 √\n张韶涵、周深 - 一路生花 (Live) - 每日推荐 √\n阿鲲 - 前行 - 每日推荐 √\nBarbie - Life in the Dreamhouse - 翁尔蔚 √\nGooGoo,王之睿 - 我的纸飞机 - 每日推荐 √\nJim Yosef,Electro-Light,Tobu - Destiny - 每日推荐 √\n周深 - 自己按门铃自己听 (Live) - 陈欣瑜 √\nARMNHMR,Melanie Fontana - Forever Young (feat. Melanie Fontana) - 每日推荐 √\nRomantic Saxophone Quintet - Right Here Waiting - 每日推荐 √\n亭淼 - 梦的光点 - 神兵小将主题曲 - 陈禹帆 √\nAvicii,Nicholas Furlong - The Nights - 每日推荐 √\nBandari - Moonglow - 每日推荐 √\n范玮琪,张云凌,杨超毅 - 最初的梦想 - 每日推荐 √\n周深 - 花开忘忧 - 陈欣瑜 √\n闻人听書_ - 一笑江湖 - 每日推荐 √\nCapo Productions - Journey - 每日推荐 √\nRefeci,Emelie Cyréus - Die Hard - 每日推荐 √\n陈奕迅 - 相信你的人 (热血励志版) - 电影《银河补习班》推广曲 - 每日推荐 √\n熊猫堂ProducePandas - 以梦为马 - 每日推荐 √\n买辣椒也用券 - 有光 - 每日推荐 √\n周深 - 过尽千帆 - 每日推荐 √\n周深 - 追赶春天的人 - 每日推荐 √\n周深 - 跳舞的月光 - 每日推荐\nKarunesh - Follow Your Heart - 每日推荐 √\n周深 - 若思念便思念 - 陈欣瑜 √\n徐佳莹 - 一样的月光 - 夏爱雅 √\nKing CAAN - Go Again (Instrumental version) - 胡轶凯 √\nTheFatRat,Laura Brehm - We’ll Meet Again - 每日推荐 √\n许巍 - 无尽光芒 - 每日推荐 √\n韩红,林俊杰 - 飞云之下 - 蒲俊宇 √\n房东的猫 - 美好事物 - 每日推荐 √\nJon Schmidt - Love Story meets Viva La Vida - 每日推荐 √\nMaroon 5,Kendrick Lamar - Don’t Wanna Know - 李柳玉丹 √\nMKJ,Jessica Chertock - Frontlines - 每日推荐 √\nInterupt,Luna LePage - Power (In Your Soul) - 李柳玉丹 √\nAlan Walker,Sabrina Carpenter,Farruko - On My Way - 李柳玉丹 √\n杨宗纬 - 我想要 (Live) - 蒲俊宇 √\nМельница - Белая кошка(小白猫) - 陈禹帆 √\n周志华,杨闵杰 - 薰衣草、爱人心 The Lavender Semll;Lover Heart - 每日推荐 √\n司南 - 梦与星海之间 - 余默浔 √\n队长 - 杏花雨绵 - 每日推荐 √\nTungevaag - Vidorra - 每日推荐 √\n凤凰传奇 - 我从草原来 - 每日推荐 √\n魏琮霏 - 青石巷 - 每日推荐 √\n很美味 - April Encounter - 张皓然 √\n凤凰传奇 - 自由飞翔 - 每日推荐 √\n杨菲洋,VIVI - 开心往前飞 - 蒲俊宇 √\nImagine Dragons - Whatever It Takes - 每日推荐 √\n哏德全 - 月光下的凤尾竹 - 每日推荐 √\n凤凰传奇 - 望星辰 - 每日推荐 √\n缝纫机乐队 - 都选C - 电影《缝纫机乐队》主题曲 - 每日推荐 √\nVicetone,Kat Nestel - Angels (Extended Mix) - 陈冠羽 √\nAlan Walker - Faded - 每日推荐 √\n凤凰传奇 - 中国味道 - 每日推荐 √\n缝纫机乐队 - 悟空传 - 每日推荐 √\nLittle Play - The Heart of the Ocean - 每日推荐 √\n共青团中央,Zy - 紫金草 - 广播剧“永不消逝的回声”片尾曲 - 每日推荐 √\nAsh - Melody (Original mix) - 每日推荐 √\n阿南亮子 - Refrain - 每日推荐 √\n단비 - Tears In Pink Rain(粉色雨中的泪水) - 每日推荐 √\nAlan Walker,宋雨琦,(G)I-DLE - Fire! (feat. YUQI ((G)I-DLE), JVKE) - 每日推荐 √\n周杰伦 - 蒲公英的约定 - 虞可欣 √\n凤凰传奇 - 云山 - 每日推荐 √\n马嘉祺 - 狼(Live) - 傅瑾渲 √\n高宾艺术团交响乐团,ZZMUSIC跨界交响大乐团 - 友谊地久天长 - 每日推荐 √\n杨世贸,Crazy Bucket 陈楒潼,Dk澄 - 花灯俏 (Waffles Remix) - 每日推荐 √\n李玉刚,Kirsty刘瑾睿 - LaoShui Edit X《若把你 · 声声慢》- 2022最美的夜 bilibili晚会 二创 - 每日推荐 √\n接个吻，开一枪,火鸡,吕口口 - 春风十里报新年 - 每日推荐 √\nTheiaの阿旋酱 - Iridescent（彩虹色） - 每日推荐 √\n张韶涵 - 阿刁 (Live) - 每日推荐 √\nAlan Walker - The Spectre - 李柳玉丹 √\n周杰伦 - 好久不见 - 姚芊羽 √\n苏逸_Suyi,洛天依 - 一梦千宵 - 郏扬菡 √\n鲁士郎 - 灌篮青春 - 《喜羊羊与灰太狼之筐出未来》大电影插曲 - 蒲俊宇 √\n哏德全 - 竹林深处 - 每日推荐 √\nMadnap,Pauline Herr - Slow Down - 余芊萱 √\nBea Miller - Open Your Eyes (Deep Blue Songspell) - 李柳玉丹 √\n艾夫 - 梦海（华中科技大学2023年研究生毕业典礼主题曲） - 每日推荐 √\n王若冰 - 感恩每一天 - 每日推荐 √\n哏德全 - 彩云追月 - 每日推荐 √\nCartoon,Futuristik,Mikk Mäe - C U Again - 陈冠羽 √\nImagine Dragons - It’s Time - 每日推荐 √\n周志华,杨闵杰 - 薰衣草 The Lavender - 每日推荐 √\n林俊杰 - Always Online - 每日推荐 √\n就是南方凯（项学凯） - 生命不止 - 每日推荐 √\n周深 - 若梦 - 每日推荐 √\n杨楚骁 - 花语（Flower Words） - 每日推荐 √\nKenny G - Jasmine Flower - 每日推荐 √\n就是南方凯（项学凯） - 离别开出花 - 每日推荐 √\nZac Efron,Zendaya - Rewrite The Stars - 邬瑞凝 √\n余雨 - 再见深海（微亮的瞬间） - 吴婧溦 √\n队长 - 我追不上以前那个发光的自己了 - 每日推荐 √\n苏运莹 - 月下 - 李柳玉丹 √\nTommee Profitt,Wondra - I’m Not Afraid - 每日推荐 √\n阳花,杨世贸 - 梦回古城 - 每日推荐 √\n张韶涵 - 隐形的翅膀 - 每日推荐 √\nSecret Garden - Anticipation - 每日推荐 √\n周深 - 浮光 - 每日推荐 √\n周深 - 化身孤岛的鲸 - 每日推荐 √\n*周深 - Unstoppable - 2023哔哩哔哩最美的夜单品 - 每日推荐 √\n*Alan Walker,黄子弘凡,洪之光,李昂星,阿达娃 - 友谊地久天长 - 2023哔哩哔哩最美的夜单品 - 每日推荐 √\n宗次郎 - 故乡的原风景 - 每日推荐 √\nTaylor Swift - Wonderland - 殷源源 √\n太一 - 大幸运术 - 秦勤 √\nEm Beihold - Painful Truth - 殷源源 √\n胡彦斌 - 月光 - 动画《秦时明月》主题曲 - 邬佳裕 √\nYetep,Afinity,Micah Martin - Never Go Back - 每日推荐 √\nSia,SLATER - Unstoppable (Sped Up) - 每日推荐 √\n周深 - 光亮 - 大型纪录片《紫禁城》主题歌 - 陈欣瑜 √\n周深 - 浓情淡如你 - 陈欣瑜 √\n周杰伦 - 圣诞星 (feat. 杨瑞代) - 虞可欣 √\n叱叱吃 - Blame It On The Kids - 殷源源 √\n小瀬村晶 - Ahead of Us - 王迁涵 √\n周深 - 月光 (Live版) - 每日推荐 √\n薛之谦 - 演员 - 每日推荐 √\nAlexandra Lilly - A Matter of Time - 秦勤 √\n接个吻，开一枪,沈以诚,薛黛霏 - 失眠飞行 - 王子奥 √\n郑润泽 - 瞬 - 邬佳裕 √\n王力宏 - 花田错 - 姚芊羽 √\n陈奕迅 - 好久不见 - 夏紫怡 √\n摩登兄弟刘宇宁 - 奉上 (影视剧《一念关山》片头主题曲) - 吴婷婷 √\nAlec Benjamin - Let Me Down Slowly - 网易云音乐合伙人第36期评分TOP3 - 每日推荐 √\nAnson Seabra - Keep Your Head Up Princess - 每日推荐 √\nONER - 艳 - 励嘉樱 √\n汪苏泷 - 耿 - 电影《最好的我们》毕业季主题曲 - 邬佳裕 √\nJoinQ - one of the girls (Sped Up) - 姚芊羽 √\nCoone,Diandra Faye - Nothing To Lose - 每日推荐 √\n周深 - 身边 - 每日推荐 √\n周深 - 风起流年 - 每日推荐 √\n陈雪燃 - 破晓 - 《一念永恒》动画传承篇片头曲 - 李柳玉丹 √\n周深 - 时间之海 - 每日推荐 √\nHENRY刘宪华 - MOONLIGHT - 邬瑞凝 √\n银临 - 洛神赋 - 李柳玉丹 √\n胡彦斌 - 撼天 - 《诛仙》动画主题曲 - 李柳玉丹 √\n黄龄,关大洲 - 星河叹 - 【星汉灿烂】影视剧人物主题曲 - 吴婷婷 √\n卫兰 - 一格格 - 王迁涵 √\n罗震环 - 靠近 - 傅嘉瑜 √\n周深 - 永恒孤独 - 电视剧《三体》主题曲 - 每日推荐 √\n周深 - Endless Sailing - 电视剧《三体》主题曲 - 每日推荐 √\n就是南方凯 - 离别开出花（DJHZ版） - 每日推荐 √\n就是南方凯 - 巡光 - 每日推荐 √\nInfinite Mask - Moment - 每日推荐 √\nHedley - Lose Control - 侯彦竹 √\nsapientdream,Slushii - Past Lives - 余芊萱 √\n歪歪超,袁小葳 - 下一站上岸 - 沈芷羽 √\n尹昔眠 - 落在生命里的光 - 李柳玉丹 √\n陈楚生,周深 - 逆光 (live) - 每日推荐 √\n李玖哲 - 不只是场梦 - 邬佳裕 √\nKenny G - You’re Beautiful - 每日推荐 √\nKenny G - The Moon Represents My Heart - 每日推荐 √\nJENNIE - You &amp; Me - 吴婷婷 √\nLandon Austin - Stay Awhile - 每日推荐 √\n超人战士 - Basim-Stjæler Mit Hjerte（纯音乐）（超人战士 remix） - 姚芊羽 √\nTaylor Swift,The Civil Wars - Safe &amp; Sound - 郭哲辰 √\n马嘉祺 - 盛夏光年 (Live) - 傅瑾渲 √\n周深 - 明天的世界更美好 - 每日推荐 √\nLost Sky,ANGELPLAYA,Chris Linton - Unbreakable - 每日推荐 √\nVicetone,Meron Ryan - Walk Thru Fire - 李柳玉丹 √\n唐伯虎Annie - 戏子花落去 - 夏雨涵 √\n等什么君(邓寓君) - 长街烟火 - 夏雨涵 √\n白挺 - 伴你成长 - 《熊出没之夺宝熊兵》插曲 - 每日推荐 √\n熊大 (配音：张伟),熊二 (配音：张秉君),光头强 (配音：谭笑) - 再次与你同行 - 《熊出没》动画电影十周年主题曲 - 每日推荐 √\nK-391,Alan Walker,Ahrix - End of Time - 余默浔 √\nThe Kid LAROI、Justin Bieber - Stay (Explicit) - 李柳玉丹 √\n南极白熊 - 蝉证序 - 每日推荐 √\nRyan Farish - Fireflies - 每日推荐 √\n筷子兄弟 - 小苹果 - 电影《老男孩猛龙过江》宣传曲 - 每日推荐 √\n轻音乐馆 - 缓慢生活 - 每日推荐 √\nLil Ghost小鬼 - 别叫我达芬奇 - 王少昊 √\nLovelyz - FALLIN’ - 姚芊羽 √\nJ4CKO,Baiden Holland - Through The Night - 每日推荐 √\n阿YueYue - 予君书 - 朱彦伊 √\n宇多田ヒカル - One Last Kiss - 王迁涵 √\n太一 - （笑） - 徐若岚 √\n范世錡 - 落在海平面的微光 - 余默浔 √\nMaroon 5,J. Cole - Animals (Remix) - 侯彦竹 √\nTF家族,TF家族-左航 - Hey Left - 夏瑜璟 √\n凤凰传奇 - 好运来 - 每日推荐 √\n","slug":"2023_01_Campus-Radio-Station-Singles","date":"2023-09-07T16:00:00.000Z","categories_index":"歌单","tags_index":"官方","author_index":"LaoShui"},{"id":"53f16d3eee15b742a4cfb37b3a93125a","title":"Python OJ题经典字符串操作——大小写转换","content":"题目介绍给定一个字符串，要求将其中的大写字母转换为小写字母，同时将小写字母转换为大写字母，并返回转换后的字符串。\n题目解析我们需要实现一个函数，接受一个字符串作为输入，然后对字符串进行大小写转换并返回结果。可以使用内置函数str.swapcase()来实现大小写转换。\n解题思路\n定义一个函数，接受一个字符串作为参数。\n使用str.swapcase()方法对字符串进行大小写转换。\n返回转换后的字符串。\n\n代码实现12345def swap_case(string):    return string.swapcase()# 测试示例print(swap_case(&#x27;Hello, World!&#x27;))  # 输出：hELLO, wORLD!\n\n解题技巧\nPython中可以使用str.swapcase()方法来进行大小写转换，非常简便。\n大小写转换是很常见的字符串处理操作，能够帮助我们快速进行字符串的格式调整。\n\n总结通过本题，我们了解到了如何使用Python中的str.swapcase()方法来对字符串进行大小写转换。这个方法非常方便，在实际开发中可以用于各种字符串处理场景。熟练掌握字符串操作可以提高编程效率，是每个开发者必备的基础技能。\n","slug":"Python-OJ题经典字符串操作——大小写转换","date":"2023-08-01T08:52:23.000Z","categories_index":"编程,Python","tags_index":"官方","author_index":"LaoShui"},{"id":"5bde76cf410436941caa57581e05a9eb","title":"信息学奥赛 如何在整数数组中寻找两数之和等于给定目标值","content":"题目介绍在一个整数数组中，找出两个数之和等于给定目标值。假设每个输入只有一个解，并且同一个元素不能使用两次。\n题目解析给定一个整数数组 nums 和一个目标值 target，要求返回数组中满足两数之和等于目标值的两个数的索引。\n解题思路一种简单的解法是使用两层循环遍历数组中的每对元素，判断它们的和是否等于目标值。这种解法的时间复杂度为 O(n²)。\n更高效的解法是利用哈希表。我们可以遍历一次数组，将每个元素与其索引存储在哈希表中。然后再遍历一次数组，对于每个元素，计算目标值与当前元素的差值，并检查这个差值是否在哈希表中。如果存在，则找到了两个数的索引。这种解法的时间复杂度为 O(n)。\n代码实现1234567def twoSum(nums, target):    hashmap = &#123;&#125;    for i, num in enumerate(nums):        complement = target - num        if complement in hashmap:            return [hashmap[complement], i]        hashmap[num] = i\n\n解题技巧\n使用哈希表可以将寻找目标值的时间复杂度从 O(n) 降低到 O(1)。\n\n总结本文介绍了在一个整数数组中寻找两个数之和等于给定目标值的方法。通过使用哈希表，我们可以以更高效的方式解决这个问题。当然，在解题时需注意题目中的约束条件，例如每个输入只有一个解，同一个元素不能使用两次等。\n","slug":"信息学奥赛-如何在整数数组中寻找两数之和等于给定目标值","date":"2023-08-01T08:49:28.000Z","categories_index":"编程,Python","tags_index":"官方","author_index":"LaoShui"},{"id":"58c7dcee11106804fdb10b6d10e556f9","title":"Python OJ题典例：判断回文串","content":"题目介绍这是一个经典的字符串处理问题。给定一个字符串，要求判断它是否是回文串。回文串是指正序和倒序读都一样的字符串。\n题目解析对于给定的字符串，我们需要判断它是否是回文串。回文串具有以下特点：\n\n字符串长度为奇数时，中间的字符可以忽略，对称位置的字符相同。\n字符串长度为偶数时，对称位置的字符相同。\n\n解题思路为了判断一个字符串是否是回文串，我们可以采用以下步骤：\n\n假设字符串的长度为n。\n使用两个指针，分别指向字符串的首位和末位。\n比较两个指针指向的字符，如果相同，则继续向中间移动，直到两个指针相遇或者不相同。\n如果两个指针相遇，则说明该字符串是回文串；如果两个指针不相同，则说明该字符串不是回文串。\n\n代码实现123456789101112131415def is_palindrome(s):    left = 0    right = len(s) - 1        while left &lt; right:        if s[left] != s[right]:            return False        left += 1        right -= 1        return True    # 测试示例print(is_palindrome(&quot;level&quot;))  # 输出：Trueprint(is_palindrome(&quot;hello&quot;))  # 输出：False\n\n解题技巧\n在比较字符时，可以使用ASCII码进行比较，提高比较效率。\n可以将字符串转换成小写或大写字母后再进行比较，忽略大小写的差异。\n\n总结通过使用双指针的方法，我们可以高效地判断一个字符串是否是回文串。这种解法的时间复杂度为O(n)，其中n是字符串的长度。在实际应用中，我们可以利用该方法来解决一些涉及字符串处理的问题。 \n","slug":"Python-OJ题典例：判断回文串","date":"2023-08-01T08:47:00.000Z","categories_index":"编程,Python","tags_index":"官方","author_index":"LaoShui"},{"id":"a6ce43f330920306cdee8f98cd33fefd","title":"解密经典数学问题：跳马问题的DFS解法","content":"题目介绍跳马问题是一个经典的数学问题，它涉及到一个马在棋盘上跳跃的路径规划。马在国际象棋中的走法是以字母表示，例如“D3”表示从位置D3跳到下一个位置。在跳马问题中，我们需要找到一条路径，使得马能够经过棋盘上的每个位置恰好一次。\n题目解析给定一个n x m的棋盘，我们需要找到一条路径，使得马能够从任意起始位置开始，经过每个位置恰好一次，并且最后回到起始位置。这是一个非常有趣且具挑战性的问题，它可以通过深度优先搜索（DFS）来解决。\n解题思路\n首先，我们定义一个n x m的棋盘，并用一个二维数组表示每个位置的访问情况。\n然后，我们选择一个起始位置作为DFS的起点，并将该位置标记为已访问。\n在DFS的过程中，我们检查当前位置的周围未访问的位置，并计算它们的可行度。\n可行度是指该位置周围未访问的位置的数量。我们可以根据可行度对周围位置进行排序，以便选择下一步要跳到的位置。\n选择下一步要跳到的位置后，我们进行递归调用DFS，并将该位置标记为已访问。\n重复上述步骤，直到所有的位置都被访问过。\n最后，我们判断最后一个位置是否能够与起始位置相连，如果可以，则说明找到了一条路径。\n\n代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354def valid_moves(pos, board, visited):    # 计算当前位置的可行度    count = 0    for move in [(2, -1), (2, 1), (-2, -1), (-2, 1), (-1, 2), (-1, -2), (1, 2), (1, -2)]:        x = pos[0] + move[0]        y = pos[1] + move[1]        if 0 &lt;= x &lt; len(board) and 0 &lt;= y &lt; len(board[0]) and not visited[x][y]:            count += 1    return countdef dfs(pos, moves, board, visited):    visited[pos[0]][pos[1]] = True    moves.append(pos)        if len(moves) == len(board) * len(board[0]):        return True        next_moves = []    for move in [(2, -1), (2, 1), (-2, -1), (-2, 1), (-1, 2), (-1, -2), (1, 2), (1, -2)]:        x = pos[0] + move[0]        y = pos[1] + move[1]        if 0 &lt;= x &lt; len(board) and 0 &lt;= y &lt; len(board[0]) and not visited[x][y]:            next_moves.append((x, y))        next_moves.sort(key=lambda move: valid_moves(move, board, visited))        for move in next_moves:        if dfs(move, moves, board, visited):            return True        moves.pop()    visited[pos[0]][pos[1]] = False    return Falsedef solve(board):    n = len(board)    m = len(board[0])    visited = [[False for _ in range(m)] for _ in range(n)]        for i in range(n):        for j in range(m):            moves = []            if dfs((i, j), moves, board, visited):                return moves        return []# 测试示例board = [[0, 0, 0, 0],          [0, 0, 0, 0],         [0, 0, 0, 0]]moves = solve(board)for move in moves:    print(move)\n\n解题技巧\n在DFS的过程中，我们可以根据马在当前位置的可行度来选择下一步要跳到的位置，这样可以提高搜索效率。\n可以使用剪枝技巧来减少不必要的搜索。例如，如果一个位置已经被访问过，我们可以直接跳过该位置，不再进行递归调用。\n\n总结跳马问题是一个有趣且具挑战性的问题，通过深度优先搜索算法可以解决。本文介绍了题目的背景和解析，给出了一种基于DFS的解题思路，并提供了相应的代码实现。通过合理选择下一步要跳到的位置和使用剪枝技巧，我们可以高效地找到一条满足条件的路径。\n","slug":"解密经典数学问题：跳马问题的DFS解法","date":"2023-08-01T08:42:48.000Z","categories_index":"编程,Python","tags_index":"官方","author_index":"LaoShui"},{"id":"32b2866d3e9af05b26a9546f73f441fc","title":"信息学奥赛 试除法：高效筛选素数的算法","content":"题目介绍素数是指只能被1和自身整除的正整数，例如2、3、5、7等。现在给定一个范围内的整数序列，你需要编写一个算法来筛选出其中的素数。\n题目解析题目要求我们从给定的整数序列中筛选出素数。我们需要设计一个算法来判断一个数是否为素数，并将素数添加到结果集合中。\n解题思路为了判断一个数是否为素数，我们可以使用试除法。对于一个待判断的数x，我们从2开始，一直试除到sqrt(x)为止。如果在这个过程中发现x可被某个数整除，则x不是素数；否则x是素数。\n具体的算法如下：\n\n定义一个空集合result，用于存储筛选出的素数。\n对于每个待判断的数x，从2开始循环到sqrt(x)，判断x是否能够被这些数整除。\n如果x不能被任何数整除，则将x添加到result集合中。\n循环结束后，返回result作为结果。\n\n代码实现12345678910111213141516171819202122import mathdef sieve_of_eratosthenes(n):    primes = []    is_prime = [True] * (n + 1)    is_prime[0] = is_prime[1] = False    for i in range(2, int(math.sqrt(n)) + 1):        if is_prime[i]:            for j in range(i * i, n + 1, i):                is_prime[j] = False    for i in range(2, n + 1):        if is_prime[i]:            primes.append(i)    return primes# 测试示例n = 100result = sieve_of_eratosthenes(n)print(result)\n\n解题技巧\n在试除法中，我们只需要循环到sqrt(x)即可，因为如果存在大于sqrt(x)的因子，那么一定存在小于sqrt(x)的因子。\n使用一个布尔数组is_prime来记录每个数是否为素数，初始化为True，然后依次将非素数位置的值置为False，这样可以避免重复判断和减少计算量。\n\n总结本文介绍了如何使用试除法筛选素数，通过这种方法，我们可以高效地得到一个范围内的素数集合。当处理类似问题时，我们可以考虑使用试除法来判断是否为素数。\n","slug":"信息学奥赛-试除法：高效筛选素数的算法","date":"2022-08-01T08:44:57.000Z","categories_index":"编程,Python","tags_index":"官方","author_index":"LaoShui"}]